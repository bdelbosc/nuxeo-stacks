version: "2.4"
services:
{% if zookeeper %}
  zookeeper:
    image: zookeeper:{{ zookeeper_version }}
    container_name: zookeeper
    hostname: zookeeper
    volumes:
      - ./data/zookeeper/data:/datalog
      - ./data/zookeeper/log:/data
{% if kafkassl %}
      - '${PWD}/kafkassl/kafka-server-jaas.conf:/conf/kafka-server-jaas.conf:rw'
      - '${PWD}/kafkassl/zoo.cfg:/conf/zoo.cfg:rw'
    environment:
      SERVER_JVMFLAGS: "-Djava.security.auth.login.config=/conf/kafka-server-jaas.conf"
{% endif %}
{% endif %}
{% if kafka %}
  kafka:
    image: wurstmeister/kafka:{{ kafka_version }}
    container_name: kafka
    hostname: kafka
    environment:
      #KAFKA_BROKER_ID: 1
      KAFKA_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 10
      KAFKA_OFFSETS_RETENTION_MINUTES: 20160
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms256M"
      KAFKA_LOG_DIRS: /kafka/log
{% if kafkassl %}
      KAFKA_LISTENERS: "SASL_SSL://kafka:9092"
      KAFKA_ADVERTISED_LISTENERS: "SASL_SSL://:9092"
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_SSL
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: "PLAIN"
      KAFKA_SSL_KEYSTORE_LOCATION: /certs/docker.kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: {{ kafka_ssl_keystore_password }}
      KAFKA_SSL_KEY_PASSWORD: {{ kafka_ssl_key_password }}
      KAFKA_SSL_TRUSTSTORE_LOCATION: /certs/docker.kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: {{ kafka_ssl_trustore_password }}
      KAFKA_JMX_OPTS: "-Djava.security.auth.login.config=/opt/kafka/config/kafka-server-jaas.conf"
      # This is needed to bypass SSL handcheck hostname verification
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
      #KAFKA_JMX_OPTS: "-Djavax.net.debug=SSL -Djava.security.auth.login.config=/opt/kafka/config/kafka-server-jaas.conf"
      # ssl debug options
      #LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER: DEBUG
      #LOG4J_LOGGER_KAFKA: DEBUG
      #LOG4J_LOGGER_ORG_APACHE_KAFKA: DEBUG
    networks:
      default:
        ipv4_address: 192.168.192.50
        aliases:
          - kafka.docker.test
    extra_hosts:
      - "kafka.docker.test:192.168.192.50"
{% else %}
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
{% endif %}
{% if zookeeper %}
    depends_on:
      - zookeeper
{% endif %}
    volumes:
{% if kafkassl %}
      - './kafkassl/certs:/certs:ro'
      - './kafkassl/kafka-server-jaas.conf:/opt/kafka/config/kafka-server-jaas.conf:ro'
{% endif %}
      - ${PWD}/data/kafka/data:/kafka:rw
      - ${PWD}/data/kafka/log:/opt/kafka/log:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
{% endif %}
{% if mongo %}
  mongodb:
    image: mongo:{{ mongo_version }}
    container_name: mongo
    hostname: mongo
    command: mongod --replSet rs0
    volumes:
      - ./mongo/initRS.js:/docker-entrypoint-initdb.d/initRS.js:ro
      - ./data/mongo/configdb:/data/configdb:rw
      - ./data/mongo/db:/data/db:rw
{% elif postgres %}
  postgres:
    image: postgres:{{ postgres_version }}
    container_name: postgres
    hostname: postgres
    environment:
      - POSTGRES_USER=nxadmin
      - POSTGRES_PASSWORD=nuxeo
    command: ["-c", "shared_buffers=256MB", "-c", "effective_cache_size=1GB", "-c", "work_mem=10MB", "-c", "wal_buffers=16MB", "-c", "full_page_writes=off"]
#    ports:
#      - "5432:5432"
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - ./data/postgres/data:/var/lib/postgresql/data:rw
{% endif %}
{% if elastic %}
  elasticsearch:
    image: {{ elastic_image }}
    container_name: elastic
    hostname: elastic
    labels:
      - "traefik.port=9200"
      - "traefik.frontend.rule=Host:elastic.docker.${DOMAIN:-localhost}"
    environment:
      - "discovery.type=single-node"
      - "cluster.routing.allocation.disk.threshold_enabled=false"
      - "ES_JAVA_OPTS=-Xms384m -Xmx384m"
{% if elastic5 %}
      xpack.security.enabled: "false"
{% endif %}
    volumes:
      - esdata:/usr/share/elasticsearch/data:rw
{% if kibana %}
  kibana:
    image: docker.elastic.co/kibana/{{ kibana_version }}
    container_name: kibana
    hostname: kibana
    labels:
      - "traefik.port=5601"
      - "traefik.frontend.rule=Host:kibana.docker.${DOMAIN:-localhost}"
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      - elasticsearch
{% endif %}
{% endif %}
{% if graphite %}
  graphite:
    build: graphite
    image: mygraphite:build1
    container_name: graphite
    hostname: graphite
    user: root
    labels:
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:graphite.docker.${DOMAIN:-localhost}"
    volumes:
      - ./data/graphite:/opt/graphite/storage/whisper:rw
{% endif %}
{% if grafana %}
  grafana:
    image: grafana/grafana:{{ grafana_version }}
    container_name: grafana
    hostname: grafana
    user: root
    labels:
      - "traefik.port=3000"
      - "traefik.frontend.rule=Host:grafana.docker.${DOMAIN:-localhost}"
    links:
      - graphite
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/:rw
      - ./data/grafana:/var/lib/grafana:rw
{% endif %}
{% if (kafkahq and (kafka or kafkaconfluent)) %}
  kafkahq:
    image: tchiotludo/kafkahq:{{ kafkahq_version }}
    container_name: kafkahq
    hostname: kafkahq
    labels:
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:kafkahq.docker.${DOMAIN:-localhost}"
    depends_on:
      - kafka
    volumes:
      - ./kafkahq/kafkahq.yml:/app/application.yml:ro
{% endif %}
{% for nuxeo_node in nuxeo_nodes %}
  {{ nuxeo_node }}:
    image: {{ nuxeo_image }}
    container_name: {{ nuxeo_node }}
    hostname: {{ nuxeo_node }}
    user: root
    # required to setup async-profiling
    privileged: true
    mem_reservation: 3g
    mem_limit: 3g
    environment:
{% if nuxeo_version is version_compare('11.0', '>') %}
      # NUXEO_CONNECT_URL: https://nos-preprod-connect.nuxeocloud.com/nuxeo/site/
      NUXEO_CONNECT_URL: https://connect.nuxeo.com/nuxeo/site/
      NUXEO_CLID: {{ lookup('file', env_instance_clid) | replace('\n','\\n') }}
      NUX_PACKAGES: {{ nuxeo_packages }}
      JAVA_OPTS: -Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8787
{% else %}
      JAVA_OPTS: -Xdebug -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n
{% endif %}
{% if redis %}
      NUXEO_REDIS_HOST: redis
{% endif %}
{% if nuxeo_version is version_compare('11.0', '>') %}
    entrypoint: /nuxeo-stack-entrypoint.sh
    command: nuxeoctl console
{% endif %}
{% if kafka or elastic or mongo or postgres or redis or kafkaconfluent %}
    depends_on:
{% endif %}
{% if kafka or kafkaconfluent %}
      - kafka
{% endif %}
{% if elastic %}
      - elasticsearch
{% endif %}
{% if mongo %}
      - mongodb
{% elif postgres %}
      - postgres
{% endif %}
{% if redis %}
      - redis
{% endif %}
{% if minio %}
      - minio
{% endif %}
    labels:
      - "traefik.http.port=8080"
      - "traefik.http.frontend.rule=Host:nuxeo.docker.${DOMAIN:-localhost}"
      - "traefik.direct.port=8080"
      - "traefik.direct.frontend.rule=Host:{{ nuxeo_node }}-node.docker.${DOMAIN:-localhost}"
      - "traefik.backend.healthcheck.path=/nuxeo/runningstatus"
      - "traefik.backend.healthcheck.port=8080"
      - "traefik.backend.healthcheck.interval=10s"
    volumes:
{% if nuxeo_version is version_compare('11.0', '<') %}
      - ./nuxeo/{{ nuxeo_node }}.conf:/docker-entrypoint-initnuxeo.d/nuxeo.conf:ro
      - ./nuxeo/init-nuxeo.sh:/docker-entrypoint-initnuxeo.d/init-nuxeo.sh:ro
      - ./nuxeo/docker-entrypoint-initnuxeo.d:/docker-entrypoint-initnuxeo.d:rw
{% else %}
      - ./nuxeo/{{ nuxeo_node }}.conf:/etc/nuxeo/conf.d/nuxeo-stack.conf:ro
      - ./nuxeo/nuxeo-stack-entrypoint.sh:/nuxeo-stack-entrypoint.sh:ro
{% endif %}
      - ./nuxeo/templates:/templates:ro
      - ./data/nuxeo-binaries:/var/lib/nuxeo-shared:rw
      - ./data/{{ nuxeo_node }}/data:/var/lib/nuxeo:rw
      - ./data/{{ nuxeo_node }}/packages:/opt/nuxeo/server/packages:rw
      - ./data/{{ nuxeo_node }}/log/tomcat:/opt/nuxeo/server/log:rw
      - ./data/{{ nuxeo_node }}/log/nuxeo:/var/log/nuxeo:rw
      - ./data/profiler:/profiler:rw
{% if kafkassl %}
      - ./kafkassl/certs:/certs:ro
{% endif %}
{% if kafkassl or minio %}
    extra_hosts:
      - "kafka.docker.test:192.168.192.50"
      - "minio.docker.${DOMAIN:-localhost}:192.168.192.60"
{% endif %}
{% endfor %}
{% if stream and kafka and nuxeo_version is version_compare('11.0', '<') %}
  stream:
    image: {{ nuxeo_image }}
    container_name: stream
    hostname: stream
    depends_on:
      - nuxeo
    volumes:
      - ./nuxeo/nuxeo.conf:/docker-entrypoint-initnuxeo.d/nuxeo.conf:ro
      - ./stream/docker-entrypoint.sh:/docker-entrypoint.sh:ro
      - ./stream/wait-for-nuxeo.sh:/wait-for-nuxeo.sh:ro
    command: /wait-for-nuxeo.sh /opt/nuxeo/server/bin/stream.sh monitor -k --codec avro -l ALL -i 30 --host graphite --port 2003
{% endif %}
{% if redis %}
  redis:
    image: redis:{{ redis_version }}
    container_name: redis
    hostname: redis
    volumes:
      - ./data/redis:/data:rw
{% endif %}
{% if minio %}
  minio:
    image: minio/minio:{{ minio_version }}
    container_name: minio
    hostname: minio
    environment:
      MINIO_ROOT_USER: {{ minio_access_key }}
      MINIO_ROOT_PASSWORD: {{ minio_secret_key }}
      MINIO_BROWSER_REDIRECT_URL: http://192.168.192.60:8080
    volumes:
      - ./data/minio/data:/data:rw
    command: server --console-address "192.168.192.60:8080" --address "192.168.192.60:80" /data
    labels:
      - "traefik.port=80"
      - "traefik.frontend.rule=Host:minio.docker.${DOMAIN:-localhost}"
    networks:
      default:
        ipv4_address: 192.168.192.60
        aliases:
          - minio.docker.${DOMAIN:-localhost}
    extra_hosts:
      - "minio.docker.${DOMAIN:-localhost}:192.168.192.60"
{% endif %}
{% if netdata %}
  netdata:
    image: netdata/netdata
    container_name: netdata
    hostname: netdata
    labels:
      - "traefik.port=19999"
      - "traefik.frontend.rule=Host:netdata.docker.${DOMAIN:-localhost}"
    environment:
      # must match grep docker /etc/group | cut -d ':' -f 3
      PGID: 999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
{% endif %}
{% if prometheus %}
  prometheus:
    image: prom/prometheus:{{ prometheus_version }}
    container_name: prometheus
    user: root
    volumes:
      - ./prometheus/:/etc/prometheus/:ro
      - ./data/prometheus:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "traefik.port=9090"
      - "traefik.frontend.rule=Host:prometheus.docker.${DOMAIN:-localhost}"
{% endif %}
{% if jaeger %}
  jaeger:
    # the all in one version is an in-memory version
    image: jaegertracing/all-in-one:{{ jaeger_version }}
    container_name: jaeger
    labels:
      - "traefik.port=16686"
      - "traefik.frontend.rule=Host:jaeger.docker.${DOMAIN:-localhost}"
{% endif %}
{% if zipkin %}
  zipkin:
    image: openzipkin/zipkin:{{ zipkin_version }}
    container_name: zipkin
    environment:
      - STORAGE_TYPE=mem
    labels:
      - "traefik.port=9411"
      - "traefik.frontend.rule=Host:zipkin.docker.${DOMAIN:-localhost}"
{% endif %}
{% if mailhog %}
  mailhog:
    image: mailhog/mailhog:{{ mailhog_version }}
    container_name: mailhog
    labels:
      - "traefik.port=8025"
      - "traefik.frontend.rule=Host:mailhog.docker.${DOMAIN:-localhost}"
{% endif %}
  traefik:
    image: traefik:{{ traefik_version }}
    container_name: traefik
    command: --api --docker
    ports:
      - 80:80
    labels:
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:traefik.docker.${DOMAIN:-localhost}"
    depends_on:
      - nuxeo
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
{% if elastic %}
{% if kafkaconfluent %}
{% include 'confluent-stack.yml.j2' %}

{% endif %}
volumes:
  esdata:
    driver_opts:
      type: none
      device: ${PWD}/data/elastic
      o: bind
{% endif %}
{% if kafkassl or minio %}
# We need to define FQDN that works within the stack, this can be done with static IP used in /etc/hosts
# - Kafka need to resolve from nuxeo for SSL handcheck and FQDN must not be on localhost domain
# - Minio for direct download need to resolve from within nuxeo container
networks:
  default:
    name: docker.test
    ipam:
      driver: default
      config:
      - subnet: 192.168.192.0/24
      - subnet: 2001:3984:3989::/64
{% else %}
# Set a MTU so Nuxeo can reach connect server even with a damn VPN
networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1400
{% endif %}
